/**
 * 正则表示大全
 * regexList.get('email') //邮箱正则
 * @type {Map<any, any>}
 */
const regexList = new Map([
    //邮箱
    ['email', /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/],

    //手机号码
    ['mobile', /^(1)\d{10}$/],

    // 身份证号
    ['idCardNumber', /^[1-9]([0-9]{16}|[0-9]{13})[xX0-9]$/i],

    //11位手机号码或者12位电话号码
    ['phoneAndChMobile', /^((0\d{2,3}-\d{7,8})|(1[0-9][0-9]\d{8,8}))$/],

    //姓名，2-10个汉字，不包括空格
    ['name', /^[\u4E00-\u9FA5]{2,10}$/],

    //18位统一社会编码，限制输入18位数字+大写英文组合
    ['ENumber18', /^([A-Z0-9]{18})$/],

    //中英文和数字组合，
    ['notSpecial', /^[\u4E00-\u9FA5A-Za-z0-9]+$/],

    //电话号码('XXX-XXXXXXX'、'XXXX-XXXXXXXX'、'XXX-XXXXXXX'、'XXX-XXXXXXXX'、'XXXXXXX'和XXXXXXXX)
    ['phone', /^(\d{3,4}-)?\d{7,8}$/],

    //身份证号,号码为15位或者18位，15位时全为数字，18位前17位为数字，最后一位是校验位，可能为数字或字符X
    ['idCode', /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/],

    //密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)
    ['password', /^[a-zA-Z\w]{6,18}$/],

    //金额(只能正数金额)
    ['balance', /(^[1-9](\d+)?(\.\d{1,2})?$)|(^0$)|(^\d\.\d{1,2}$)/],

    //整数或两位小数正则
    ['number', /^([0-9]*)((\.)([0-9]){1,2})?$/],
    ['number0-1', /^(1|(0((\.)([0-9]){1,2})?))$/],
    ['number0-50', /^(50.00|50|(([1-4][0-9])|[0-9])((\.)([0-9]){1,2})?)$/],
    ['number0-100', /^(100|(([1-9]){1}[0-9]?|0{1})((\.)([0-9]){1,2})?)$/],
    ['number0-99', /^((([1-9]){1}[0-9]?|0{1})((\.)([0-9]){1,2})?)$/],
    ['number1-100', /^(100|(([1-9]){1}[0-9]?)((\.)([0-9]){1,2})?)$/],
    ['number0-5000', /^(5000|(\d{1,3}|[1-4]\d{1,3})((\.)([0-9]){1,2})?)$/],
    ['number0-50000', /^(50000|(\d{1,4}|[1-4]\d{1,4})((\.)([0-9]){1,2})?)$/],
    ['number0-9999999', /^(\d{0,6})((\.)([0-9]){1,2})?$/],

    //整数或三位小数正则
    ['number0-100T', /^(100|(([1-9]){1}[0-9]?|0{1})((\.)([0-9]){1,3})?)$/],
    ['number0-99T', /^((([1-9]){1}[0-9]?|0{1})((\.)([0-9]){1,3})?)$/],

    //整数或四位小数正则
    ['number0-100F', /^(100|(([1-9]){1}[0-9]?|0{1})((\.)([0-9]){1,4})?)$/],
    ['number0-99F', /^((([1-9]){1}[0-9]?|0{1})((\.)([0-9]){1,4})?)$/],

    //整数或一位小数正则
    ['float1-5', /^(5|[1-4]((\.)([0-9]))?)$/],
    ['float1-10', /^(10|[1-9]((\.)([0-9]))?)$/],
    ['float0-100', /^(100|(([1-9]){1}[0-9]?|0{1})((\.)([0-9]))?)$/],
    ['float0-5000', /^(5000|(\d{1,3}|[1-4]\d{1,3})((\.)([0-9]))?)$/],

    //整数范围正则
    ['int1-3', /^[1-3]$/],
    ['int1-4', /^[1-4]$/],
    ['int0-5', /^[0-5]$/],
    ['int1-5', /^[1-5]$/],
    ['int0-6', /^[0-6]$/],
    ['int1-6', /^[1-6]$/],
    ['int1-7', /^[1-7]$/],
    ['int0-10', /^(10|[0-9])$/],
    ['int1-10', /^(10|[1-9])$/],
    ['int1-15', /^([1-9]|1[0-5])$/],
    ['int0-20', /^(20|\d|1[0-9])$/],
    ['int1-20', /^(20|1[0-9]|[1-9])$/],
    ['int3-20', /^(20|[3-9]|1[0-9])$/],
    ['int0-24', /^([0-9]|1[0-9]|20|21|22|23|24)$/],
    ['int0-30', /^(30|[1-2][0-9]|[0-9])$/],
    ['int1-30', /^(30|[1-2][0-9]|[1-9])$/],
    ['int1-50', /^(50|[1-4][0-9]|[1-9])$/],
    ['int0-50', /^(50|[1-4][0-9]|[0-9])$/],
    ['int0-60', /^(60|[1-5][0-9]|[0-9])$/],
    ['int1-60', /^(60|[1-5][0-9]|[1-9])$/],
    ['int0-80', /^(80|[1-7][0-9]|[0-9])$/],
    ['int1-80', /^(80|[1-7][0-9]|[1-9])$/],
    ['int0-100', /^(100|\d{1,2})$/],
    ['int1-100', /^(100|[1-9]|[1-9][0-9])$/],
    ['int0-120', /^(120|1[0-1][0-9]|\d{1,2})$/],
    ['int1-120', /^(120|1[0-1][0-9]|[1-9]|[1-9][0-9])$/],
    ['int10-120', /^(120|1[0-1][0-9]|[1-9][0-9])$/],
    ['int0-140', /^(140|1[0-3][0-9]|\d{1,2})$/],
    ['int0-300', /^(300|[1-2]\d{1,2}|\d{1,2})$/],
    ['int3-300', /^(300|[1-2][0-9][0-9]|[1-9][0-9]|[3-9])$/],
    ['int5-300', /^(300|[1-2][0-9][0-9]|[1-9][0-9]|[5-9])$/],
    ['int30-300', /^(300|[1-2]\d{2}|[3-9][0-9])$/],
    ['int1-320', /^(320|3[0-1][0-9]|[1-2][0-9][0-9]|[1-9]|[1-9][0-9])$/],
    ['int0-480', /^([0-9]|[1-9]\d|[1-3]\d\d|4[0-7]\d|480)$/],
    ['int1-480', /^([1-9]|[1-9]\d|[1-3]\d\d|4[0-7]\d|480)$/],
    ['int5-480', /^([5-9]|[1-9]\d|[1-3]\d\d|4[0-7]\d|480)$/],
    ['int1-500', /^(500|[1-4][0-9][0-9]|[1-9][0-9]|[1-9])$/],
    ['int0-1000', /^(1000|\d{1,3})$/],
    ['int1-1000', /^([1-9]\d{0,2}|1000)$/],
    ['int1-4000', /^([1-9]\d{0,2}|[1-3]\d{1,3}|4000)$/],
    ['int0-3000', /^(3000|[1-2]\d{1,3}|\d{1,3})$/],
    ['int0-100000', /^(100000|\d{1,5})$/],
    ['int1-100000', /^(100000|[1-9]\d{0,4})$/],
    ['int0-9999999', /^0|[1-9]\d{0,6}$/],
    ['int1-9999999', /^[1-9]\d{0,6}$/],
    ['int-100000-100000', /^(-?)(0|[1-9][0-9]{0,4}|100000)$/],
    ['int0-10000', /^(?:0|[1-9][0-9]{0,3}|10000)$/],
    ['int0-1000000', /^(?:0|[1-9][0-9]{0,5}|1000000)$/],
    ['int1-1000000', /^(?:[1-9][0-9]{0,5}|1000000)$/],
    ['int1-10000000', /^(?:[1-9][0-9]{0,6}|10000000)$/],
    //正整数正则
    ['int0-9999999999',/^\d*$/],
    //负数范围正则
    ['minus1-100000', /^(-|\+?)(100000|[1-9]\d{0,4})$/],
    ['floatMinus1-100000', /^((-|\+?)(100000|[1-9]\d{0,4})((\.)([0-9]){1,2})?)$/],
    // 仅限2个字以上的中文
    ['characters', /^[\S][\u4e00-\u9fa5]+$/],
    ['chargeRate', /^[0-9]{1,2}$/],
    ['EandN', /^[a-zA-Z0-9]/],
    ['EandN2', /^[\S][A-Z0-9]*$/],
    ['number*', /^[0-9]*$/],
    ['kw', /^((([0-9]*)(\.[0-9]{2}))|(([0-9]*)(\.[0-9]{1}))|([\S][0-9]*))$/],
]);

export default regexList;
